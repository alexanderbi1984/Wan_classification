# Sample configuration YAML for MultiTaskCoralClassifier
# This file provides a clean, structured template for all core hyperparameters.

# Unified Experiment Configuration (derived from config_multi_task_coral and example_config_with_callbacks)

run_name: "multitask_joint_with_callbacks" # From example_config_with_callbacks

# --- Data Settings ---
# batch_size is now defined under training_params for a more logical grouping with trainer args
# num_workers will be taken from command line args or a default in train_multitask.py

syracuse_settings:
  meta_path: "/home/nbi/marlin/wan_features/meta.json" # From example_config_with_callbacks
  task: "classification"  # Default, confirm if different needed
  thresholds: [1.0, 3.0, 5.0, 7.0] # Default, ensure this matches num_classes_pain. Example: For 5 classes like in example_config
  num_classes_pain: 5 # From example_config_with_callbacks (model.num_pain_classes)
  balanced_sampling: false # From example_config_with_callbacks
  temporal_pooling: "mean" # From example_config_with_callbacks
  flatten: true # From example_config_with_callbacks
  cv_fold: 0 # Default for non-CV mode, from example_config_with_callbacks

biovid_settings:
  features_path: "/home/nbi/marlin/wan_features/" # From example_config_with_callbacks
  meta_path: "/home/nbi/marlin/wan_features/meta.json" # From example_config_with_callbacks
  num_classes_stimulus: 5 # From example_config_with_callbacks (model.num_stimulus_classes)
  split_ratio: 0.8 # From example_config_with_callbacks
  temporal_pooling: "mean" # From example_config_with_callbacks
  flatten: true # From example_config_with_callbacks

# --- Model Hyperparameters (for MultiTaskCoralClassifier) ---
# input_dim is auto-detected by train_multitask.py
model_params:
  # input_dim: 768 # Can be kept or removed if always auto-detected by train_multitask.py
  num_pain_classes: 5 # Should match syracuse_settings.num_classes_pain
  num_stimulus_classes: 5 # Should match biovid_settings.num_classes_stimulus
  encoder_hidden_dims: [512, 256] # From example_config_with_callbacks
  encoder_dropout: 0.5 # From example_config_with_callbacks
  
  # Loss-related params (previously in 'loss' section)
  pain_loss_weight: 1.0 # From example_config_with_callbacks
  stim_loss_weight: 1.0 # From example_config_with_callbacks
  label_smoothing: 0.1 # From example_config_with_callbacks
  use_distance_penalty: false # From example_config_with_callbacks
  focal_gamma: null # Default, not in example_config_with_callbacks

# --- Optimizer Settings ---
optimizer_params:
  optimizer_type: "AdamW" # From example_config_with_callbacks (optimizer_name)
  learning_rate: 5.0e-5 # From example_config_with_callbacks
  weight_decay: 0.01 # From example_config_with_callbacks

# --- Learning Rate Scheduler Settings ---
lr_scheduler_params:
  use_scheduler: true # From example_config_with_callbacks
  factor: 0.5 # From example_config_with_callbacks
  patience: 5 # From example_config_with_callbacks
  min_lr: 1.0e-6 # From example_config_with_callbacks

# --- Trainer Settings ---
trainer_params:
  batch_size: 64 # From example_config_with_callbacks
  max_epochs: 500 # From example_config_with_callbacks
  monitor_metric: "val_pain_QWK" # Consistent with train_multitask.py arg default
  early_stop_patience: 100 # From example_config_with_callbacks
  model_summary_depth: 3 # From example_config_with_callbacks
  seed: 42 # From example_config_with_callbacks

# Paths to main data files (can be overridden by specific settings above if needed)
# These were in the original example_config_with_callbacks.yaml
# syracuse_meta_path: "data/Syracuse/meta.json" # Covered by syracuse_settings
# syracuse_config_path: "config_pain/5class.yaml" # This will be removed from SyracuseDataModule
# biovid_features_path: "data/BioVid/PartA_features_original_OpenFace_MAE_Mean_Std" # Covered by biovid_settings
# biovid_meta_path: "data/BioVid/meta_PARTA_ সভसदनों.json" # Covered by biovid_settings

# Comments from original file:
# sample_config_for_multitask_coral.yaml
# This file provides a clean, structured template for all core hyperparameters.

# Example how you would load and use:
# import yaml
# with open('config_pain/config_multi_task_coral.yaml','r') as f: # Adjusted path
#     config = yaml.safe_load(f)
#
# Accessing nested params:
# model_hparams = config['model_params']
# model_hparams['num_pain_classes'] = config['syracuse_settings']['num_classes_pain']
# model_hparams['num_stimulus_classes'] = config['biovid_settings']['num_classes_stimulus']
# # Pass other relevant params from optimizer_params, lr_scheduler_params to model/trainer
# # module = MultiTaskCoralClassifier(**model_hparams) 